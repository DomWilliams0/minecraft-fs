// automatically generated by the FlatBuffers compiler, do not modify

use std::cmp::Ordering;
use std::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod mcfs {

    use std::cmp::Ordering;
    use std::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_ERROR: i32 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_ERROR: i32 = 2;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_ERROR: [Error; 3] =
        [Error::Unknown, Error::UnknownCommand, Error::NoGame];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct Error(pub i32);
    #[allow(non_upper_case_globals)]
    impl Error {
        pub const Unknown: Self = Self(0);
        pub const UnknownCommand: Self = Self(1);
        pub const NoGame: Self = Self(2);

        pub const ENUM_MIN: i32 = 0;
        pub const ENUM_MAX: i32 = 2;
        pub const ENUM_VALUES: &'static [Self] =
            &[Self::Unknown, Self::UnknownCommand, Self::NoGame];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::Unknown => Some("Unknown"),
                Self::UnknownCommand => Some("UnknownCommand"),
                Self::NoGame => Some("NoGame"),
                _ => None,
            }
        }
    }
    impl std::fmt::Debug for Error {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for Error {
        type Inner = Self;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = unsafe { flatbuffers::read_scalar_at::<i32>(buf, loc) };
            Self(b)
        }
    }

    impl flatbuffers::Push for Error {
        type Output = Error;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            unsafe {
                flatbuffers::emplace_scalar::<i32>(dst, self.0);
            }
        }
    }

    impl flatbuffers::EndianScalar for Error {
        #[inline]
        fn to_little_endian(self) -> Self {
            let b = i32::to_le(self.0);
            Self(b)
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(self) -> Self {
            let b = i32::from_le(self.0);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for Error {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            i32::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for Error {}
    // struct Vec3, aligned to 8
    #[repr(transparent)]
    #[derive(Clone, Copy, PartialEq)]
    pub struct Vec3(pub [u8; 24]);
    impl Default for Vec3 {
        fn default() -> Self {
            Self([0; 24])
        }
    }
    impl std::fmt::Debug for Vec3 {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_struct("Vec3")
                .field("x", &self.x())
                .field("y", &self.y())
                .field("z", &self.z())
                .finish()
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for Vec3 {}
    impl flatbuffers::SafeSliceAccess for Vec3 {}
    impl<'a> flatbuffers::Follow<'a> for Vec3 {
        type Inner = &'a Vec3;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            <&'a Vec3>::follow(buf, loc)
        }
    }
    impl<'a> flatbuffers::Follow<'a> for &'a Vec3 {
        type Inner = &'a Vec3;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            flatbuffers::follow_cast_ref::<Vec3>(buf, loc)
        }
    }
    impl<'b> flatbuffers::Push for Vec3 {
        type Output = Vec3;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            let src = unsafe {
                ::std::slice::from_raw_parts(self as *const Vec3 as *const u8, Self::size())
            };
            dst.copy_from_slice(src);
        }
    }
    impl<'b> flatbuffers::Push for &'b Vec3 {
        type Output = Vec3;

        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            let src = unsafe {
                ::std::slice::from_raw_parts(*self as *const Vec3 as *const u8, Self::size())
            };
            dst.copy_from_slice(src);
        }
    }

    impl<'a> flatbuffers::Verifiable for Vec3 {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.in_buffer::<Self>(pos)
        }
    }
    impl<'a> Vec3 {
        #[allow(clippy::too_many_arguments)]
        pub fn new(x: f64, y: f64, z: f64) -> Self {
            let mut s = Self([0; 24]);
            s.set_x(x);
            s.set_y(y);
            s.set_z(z);
            s
        }

        pub fn x(&self) -> f64 {
            let mut mem = core::mem::MaybeUninit::<f64>::uninit();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[0..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<f64>(),
                );
                mem.assume_init()
            }
            .from_little_endian()
        }

        pub fn set_x(&mut self, x: f64) {
            let x_le = x.to_little_endian();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const f64 as *const u8,
                    self.0[0..].as_mut_ptr(),
                    core::mem::size_of::<f64>(),
                );
            }
        }

        pub fn y(&self) -> f64 {
            let mut mem = core::mem::MaybeUninit::<f64>::uninit();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[8..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<f64>(),
                );
                mem.assume_init()
            }
            .from_little_endian()
        }

        pub fn set_y(&mut self, x: f64) {
            let x_le = x.to_little_endian();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const f64 as *const u8,
                    self.0[8..].as_mut_ptr(),
                    core::mem::size_of::<f64>(),
                );
            }
        }

        pub fn z(&self) -> f64 {
            let mut mem = core::mem::MaybeUninit::<f64>::uninit();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[16..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<f64>(),
                );
                mem.assume_init()
            }
            .from_little_endian()
        }

        pub fn set_z(&mut self, x: f64) {
            let x_le = x.to_little_endian();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const f64 as *const u8,
                    self.0[16..].as_mut_ptr(),
                    core::mem::size_of::<f64>(),
                );
            }
        }
    }

    pub enum ResponseOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Response<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Response<'a> {
        type Inner = Response<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> Response<'a> {
        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Response { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args ResponseArgs<'args>,
        ) -> flatbuffers::WIPOffset<Response<'bldr>> {
            let mut builder = ResponseBuilder::new(_fbb);
            if let Some(x) = args.pos {
                builder.add_pos(x);
            }
            if let Some(x) = args.string {
                builder.add_string(x);
            }
            if let Some(x) = args.int {
                builder.add_int(x);
            }
            if let Some(x) = args.float {
                builder.add_float(x);
            }
            if let Some(x) = args.error {
                builder.add_error(x);
            }
            builder.finish()
        }

        pub const VT_ERROR: flatbuffers::VOffsetT = 4;
        pub const VT_FLOAT: flatbuffers::VOffsetT = 6;
        pub const VT_INT: flatbuffers::VOffsetT = 8;
        pub const VT_STRING: flatbuffers::VOffsetT = 10;
        pub const VT_POS: flatbuffers::VOffsetT = 12;

        #[inline]
        pub fn error(&self) -> Option<Error> {
            self._tab.get::<Error>(Response::VT_ERROR, None)
        }
        #[inline]
        pub fn float(&self) -> Option<f32> {
            self._tab.get::<f32>(Response::VT_FLOAT, None)
        }
        #[inline]
        pub fn int(&self) -> Option<i32> {
            self._tab.get::<i32>(Response::VT_INT, None)
        }
        #[inline]
        pub fn string(&self) -> Option<&'a str> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<&str>>(Response::VT_STRING, None)
        }
        #[inline]
        pub fn pos(&self) -> Option<&'a Vec3> {
            self._tab.get::<Vec3>(Response::VT_POS, None)
        }
    }

    impl flatbuffers::Verifiable for Response<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<Error>(&"error", Self::VT_ERROR, false)?
                .visit_field::<f32>(&"float", Self::VT_FLOAT, false)?
                .visit_field::<i32>(&"int", Self::VT_INT, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    &"string",
                    Self::VT_STRING,
                    false,
                )?
                .visit_field::<Vec3>(&"pos", Self::VT_POS, false)?
                .finish();
            Ok(())
        }
    }
    pub struct ResponseArgs<'a> {
        pub error: Option<Error>,
        pub float: Option<f32>,
        pub int: Option<i32>,
        pub string: Option<flatbuffers::WIPOffset<&'a str>>,
        pub pos: Option<&'a Vec3>,
    }
    impl<'a> Default for ResponseArgs<'a> {
        #[inline]
        fn default() -> Self {
            ResponseArgs {
                error: None,
                float: None,
                int: None,
                string: None,
                pos: None,
            }
        }
    }
    pub struct ResponseBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> ResponseBuilder<'a, 'b> {
        #[inline]
        pub fn add_error(&mut self, error: Error) {
            self.fbb_
                .push_slot_always::<Error>(Response::VT_ERROR, error);
        }
        #[inline]
        pub fn add_float(&mut self, float: f32) {
            self.fbb_.push_slot_always::<f32>(Response::VT_FLOAT, float);
        }
        #[inline]
        pub fn add_int(&mut self, int: i32) {
            self.fbb_.push_slot_always::<i32>(Response::VT_INT, int);
        }
        #[inline]
        pub fn add_string(&mut self, string: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Response::VT_STRING, string);
        }
        #[inline]
        pub fn add_pos(&mut self, pos: &Vec3) {
            self.fbb_.push_slot_always::<&Vec3>(Response::VT_POS, pos);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ResponseBuilder<'a, 'b> {
            let start = _fbb.start_table();
            ResponseBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Response<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for Response<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("Response");
            ds.field("error", &self.error());
            ds.field("float", &self.float());
            ds.field("int", &self.int());
            ds.field("string", &self.string());
            ds.field("pos", &self.pos());
            ds.finish()
        }
    }
    #[inline]
    #[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
    pub fn get_root_as_response<'a>(buf: &'a [u8]) -> Response<'a> {
        unsafe { flatbuffers::root_unchecked::<Response<'a>>(buf) }
    }

    #[inline]
    #[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
    pub fn get_size_prefixed_root_as_response<'a>(buf: &'a [u8]) -> Response<'a> {
        unsafe { flatbuffers::size_prefixed_root_unchecked::<Response<'a>>(buf) }
    }

    #[inline]
    /// Verifies that a buffer of bytes contains a `Response`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_response_unchecked`.
    pub fn root_as_response(buf: &[u8]) -> Result<Response, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<Response>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `Response` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_response_unchecked`.
    pub fn size_prefixed_root_as_response(
        buf: &[u8],
    ) -> Result<Response, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<Response>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `Response` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_response_unchecked`.
    pub fn root_as_response_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Response<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<Response<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `Response` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_response_unchecked`.
    pub fn size_prefixed_root_as_response_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Response<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<Response<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a Response and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `Response`.
    pub unsafe fn root_as_response_unchecked(buf: &[u8]) -> Response {
        flatbuffers::root_unchecked::<Response>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed Response and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `Response`.
    pub unsafe fn size_prefixed_root_as_response_unchecked(buf: &[u8]) -> Response {
        flatbuffers::size_prefixed_root_unchecked::<Response>(buf)
    }
    #[inline]
    pub fn finish_response_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<Response<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_response_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<Response<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod MCFS
