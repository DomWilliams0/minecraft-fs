// automatically generated by the FlatBuffers compiler, do not modify

use std::cmp::Ordering;
use std::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod mcfs {

    use std::cmp::Ordering;
    use std::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_DIMENSION: u8 = 1;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_DIMENSION: u8 = 3;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_DIMENSION: [Dimension; 3] =
        [Dimension::Overworld, Dimension::Nether, Dimension::End];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct Dimension(pub u8);
    #[allow(non_upper_case_globals)]
    impl Dimension {
        pub const Overworld: Self = Self(1);
        pub const Nether: Self = Self(2);
        pub const End: Self = Self(3);

        pub const ENUM_MIN: u8 = 1;
        pub const ENUM_MAX: u8 = 3;
        pub const ENUM_VALUES: &'static [Self] = &[Self::Overworld, Self::Nether, Self::End];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::Overworld => Some("Overworld"),
                Self::Nether => Some("Nether"),
                Self::End => Some("End"),
                _ => None,
            }
        }
    }
    impl std::fmt::Debug for Dimension {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for Dimension {
        type Inner = Self;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = unsafe { flatbuffers::read_scalar_at::<u8>(buf, loc) };
            Self(b)
        }
    }

    impl flatbuffers::Push for Dimension {
        type Output = Dimension;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            unsafe {
                flatbuffers::emplace_scalar::<u8>(dst, self.0);
            }
        }
    }

    impl flatbuffers::EndianScalar for Dimension {
        #[inline]
        fn to_little_endian(self) -> Self {
            let b = u8::to_le(self.0);
            Self(b)
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(self) -> Self {
            let b = u8::from_le(self.0);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for Dimension {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            u8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for Dimension {}
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_COMMAND_TYPE: i32 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_COMMAND_TYPE: i32 = 9;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_COMMAND_TYPE: [CommandType; 10] = [
        CommandType::PlayerName,
        CommandType::EntityType,
        CommandType::EntityPosition,
        CommandType::EntityHealth,
        CommandType::WorldTime,
        CommandType::BlockType,
        CommandType::BlockColor,
        CommandType::ControlSay,
        CommandType::ControlJump,
        CommandType::ControlMove,
    ];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct CommandType(pub i32);
    #[allow(non_upper_case_globals)]
    impl CommandType {
        pub const PlayerName: Self = Self(0);
        pub const EntityType: Self = Self(1);
        pub const EntityPosition: Self = Self(2);
        pub const EntityHealth: Self = Self(3);
        pub const WorldTime: Self = Self(4);
        pub const BlockType: Self = Self(5);
        pub const BlockColor: Self = Self(6);
        pub const ControlSay: Self = Self(7);
        pub const ControlJump: Self = Self(8);
        pub const ControlMove: Self = Self(9);

        pub const ENUM_MIN: i32 = 0;
        pub const ENUM_MAX: i32 = 9;
        pub const ENUM_VALUES: &'static [Self] = &[
            Self::PlayerName,
            Self::EntityType,
            Self::EntityPosition,
            Self::EntityHealth,
            Self::WorldTime,
            Self::BlockType,
            Self::BlockColor,
            Self::ControlSay,
            Self::ControlJump,
            Self::ControlMove,
        ];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::PlayerName => Some("PlayerName"),
                Self::EntityType => Some("EntityType"),
                Self::EntityPosition => Some("EntityPosition"),
                Self::EntityHealth => Some("EntityHealth"),
                Self::WorldTime => Some("WorldTime"),
                Self::BlockType => Some("BlockType"),
                Self::BlockColor => Some("BlockColor"),
                Self::ControlSay => Some("ControlSay"),
                Self::ControlJump => Some("ControlJump"),
                Self::ControlMove => Some("ControlMove"),
                _ => None,
            }
        }
    }
    impl std::fmt::Debug for CommandType {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for CommandType {
        type Inner = Self;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = unsafe { flatbuffers::read_scalar_at::<i32>(buf, loc) };
            Self(b)
        }
    }

    impl flatbuffers::Push for CommandType {
        type Output = CommandType;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            unsafe {
                flatbuffers::emplace_scalar::<i32>(dst, self.0);
            }
        }
    }

    impl flatbuffers::EndianScalar for CommandType {
        #[inline]
        fn to_little_endian(self) -> Self {
            let b = i32::to_le(self.0);
            Self(b)
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(self) -> Self {
            let b = i32::from_le(self.0);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for CommandType {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            i32::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for CommandType {}
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_GAME_REQUEST_BODY: u8 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_GAME_REQUEST_BODY: u8 = 2;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_GAME_REQUEST_BODY: [GameRequestBody; 3] = [
        GameRequestBody::NONE,
        GameRequestBody::Command,
        GameRequestBody::StateRequest,
    ];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct GameRequestBody(pub u8);
    #[allow(non_upper_case_globals)]
    impl GameRequestBody {
        pub const NONE: Self = Self(0);
        pub const Command: Self = Self(1);
        pub const StateRequest: Self = Self(2);

        pub const ENUM_MIN: u8 = 0;
        pub const ENUM_MAX: u8 = 2;
        pub const ENUM_VALUES: &'static [Self] = &[Self::NONE, Self::Command, Self::StateRequest];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::NONE => Some("NONE"),
                Self::Command => Some("Command"),
                Self::StateRequest => Some("StateRequest"),
                _ => None,
            }
        }
    }
    impl std::fmt::Debug for GameRequestBody {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for GameRequestBody {
        type Inner = Self;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = unsafe { flatbuffers::read_scalar_at::<u8>(buf, loc) };
            Self(b)
        }
    }

    impl flatbuffers::Push for GameRequestBody {
        type Output = GameRequestBody;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            unsafe {
                flatbuffers::emplace_scalar::<u8>(dst, self.0);
            }
        }
    }

    impl flatbuffers::EndianScalar for GameRequestBody {
        #[inline]
        fn to_little_endian(self) -> Self {
            let b = u8::to_le(self.0);
            Self(b)
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(self) -> Self {
            let b = u8::from_le(self.0);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for GameRequestBody {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            u8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for GameRequestBody {}
    pub struct GameRequestBodyUnionTableOffset {}

    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_ERROR: i32 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_ERROR: i32 = 4;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_ERROR: [Error; 5] = [
        Error::Unknown,
        Error::UnknownCommand,
        Error::NoGame,
        Error::MalformedRequest,
        Error::NoSuchEntity,
    ];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct Error(pub i32);
    #[allow(non_upper_case_globals)]
    impl Error {
        pub const Unknown: Self = Self(0);
        pub const UnknownCommand: Self = Self(1);
        pub const NoGame: Self = Self(2);
        pub const MalformedRequest: Self = Self(3);
        pub const NoSuchEntity: Self = Self(4);

        pub const ENUM_MIN: i32 = 0;
        pub const ENUM_MAX: i32 = 4;
        pub const ENUM_VALUES: &'static [Self] = &[
            Self::Unknown,
            Self::UnknownCommand,
            Self::NoGame,
            Self::MalformedRequest,
            Self::NoSuchEntity,
        ];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::Unknown => Some("Unknown"),
                Self::UnknownCommand => Some("UnknownCommand"),
                Self::NoGame => Some("NoGame"),
                Self::MalformedRequest => Some("MalformedRequest"),
                Self::NoSuchEntity => Some("NoSuchEntity"),
                _ => None,
            }
        }
    }
    impl std::fmt::Debug for Error {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for Error {
        type Inner = Self;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = unsafe { flatbuffers::read_scalar_at::<i32>(buf, loc) };
            Self(b)
        }
    }

    impl flatbuffers::Push for Error {
        type Output = Error;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            unsafe {
                flatbuffers::emplace_scalar::<i32>(dst, self.0);
            }
        }
    }

    impl flatbuffers::EndianScalar for Error {
        #[inline]
        fn to_little_endian(self) -> Self {
            let b = i32::to_le(self.0);
            Self(b)
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(self) -> Self {
            let b = i32::from_le(self.0);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for Error {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            i32::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for Error {}
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_GAME_RESPONSE_BODY: u8 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_GAME_RESPONSE_BODY: u8 = 2;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_GAME_RESPONSE_BODY: [GameResponseBody; 3] = [
        GameResponseBody::NONE,
        GameResponseBody::Response,
        GameResponseBody::StateResponse,
    ];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct GameResponseBody(pub u8);
    #[allow(non_upper_case_globals)]
    impl GameResponseBody {
        pub const NONE: Self = Self(0);
        pub const Response: Self = Self(1);
        pub const StateResponse: Self = Self(2);

        pub const ENUM_MIN: u8 = 0;
        pub const ENUM_MAX: u8 = 2;
        pub const ENUM_VALUES: &'static [Self] = &[Self::NONE, Self::Response, Self::StateResponse];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::NONE => Some("NONE"),
                Self::Response => Some("Response"),
                Self::StateResponse => Some("StateResponse"),
                _ => None,
            }
        }
    }
    impl std::fmt::Debug for GameResponseBody {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for GameResponseBody {
        type Inner = Self;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = unsafe { flatbuffers::read_scalar_at::<u8>(buf, loc) };
            Self(b)
        }
    }

    impl flatbuffers::Push for GameResponseBody {
        type Output = GameResponseBody;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            unsafe {
                flatbuffers::emplace_scalar::<u8>(dst, self.0);
            }
        }
    }

    impl flatbuffers::EndianScalar for GameResponseBody {
        #[inline]
        fn to_little_endian(self) -> Self {
            let b = u8::to_le(self.0);
            Self(b)
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(self) -> Self {
            let b = u8::from_le(self.0);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for GameResponseBody {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            u8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for GameResponseBody {}
    pub struct GameResponseBodyUnionTableOffset {}

    // struct Vec3, aligned to 8
    #[repr(transparent)]
    #[derive(Clone, Copy, PartialEq)]
    pub struct Vec3(pub [u8; 24]);
    impl Default for Vec3 {
        fn default() -> Self {
            Self([0; 24])
        }
    }
    impl std::fmt::Debug for Vec3 {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_struct("Vec3")
                .field("x", &self.x())
                .field("y", &self.y())
                .field("z", &self.z())
                .finish()
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for Vec3 {}
    impl flatbuffers::SafeSliceAccess for Vec3 {}
    impl<'a> flatbuffers::Follow<'a> for Vec3 {
        type Inner = &'a Vec3;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            <&'a Vec3>::follow(buf, loc)
        }
    }
    impl<'a> flatbuffers::Follow<'a> for &'a Vec3 {
        type Inner = &'a Vec3;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            flatbuffers::follow_cast_ref::<Vec3>(buf, loc)
        }
    }
    impl<'b> flatbuffers::Push for Vec3 {
        type Output = Vec3;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            let src = unsafe {
                ::std::slice::from_raw_parts(self as *const Vec3 as *const u8, Self::size())
            };
            dst.copy_from_slice(src);
        }
    }
    impl<'b> flatbuffers::Push for &'b Vec3 {
        type Output = Vec3;

        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            let src = unsafe {
                ::std::slice::from_raw_parts(*self as *const Vec3 as *const u8, Self::size())
            };
            dst.copy_from_slice(src);
        }
    }

    impl<'a> flatbuffers::Verifiable for Vec3 {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.in_buffer::<Self>(pos)
        }
    }
    impl<'a> Vec3 {
        #[allow(clippy::too_many_arguments)]
        pub fn new(x: f64, y: f64, z: f64) -> Self {
            let mut s = Self([0; 24]);
            s.set_x(x);
            s.set_y(y);
            s.set_z(z);
            s
        }

        pub fn x(&self) -> f64 {
            let mut mem = core::mem::MaybeUninit::<f64>::uninit();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[0..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<f64>(),
                );
                mem.assume_init()
            }
            .from_little_endian()
        }

        pub fn set_x(&mut self, x: f64) {
            let x_le = x.to_little_endian();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const f64 as *const u8,
                    self.0[0..].as_mut_ptr(),
                    core::mem::size_of::<f64>(),
                );
            }
        }

        pub fn y(&self) -> f64 {
            let mut mem = core::mem::MaybeUninit::<f64>::uninit();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[8..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<f64>(),
                );
                mem.assume_init()
            }
            .from_little_endian()
        }

        pub fn set_y(&mut self, x: f64) {
            let x_le = x.to_little_endian();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const f64 as *const u8,
                    self.0[8..].as_mut_ptr(),
                    core::mem::size_of::<f64>(),
                );
            }
        }

        pub fn z(&self) -> f64 {
            let mut mem = core::mem::MaybeUninit::<f64>::uninit();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[16..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<f64>(),
                );
                mem.assume_init()
            }
            .from_little_endian()
        }

        pub fn set_z(&mut self, x: f64) {
            let x_le = x.to_little_endian();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const f64 as *const u8,
                    self.0[16..].as_mut_ptr(),
                    core::mem::size_of::<f64>(),
                );
            }
        }
    }

    // struct BlockPos, aligned to 4
    #[repr(transparent)]
    #[derive(Clone, Copy, PartialEq)]
    pub struct BlockPos(pub [u8; 12]);
    impl Default for BlockPos {
        fn default() -> Self {
            Self([0; 12])
        }
    }
    impl std::fmt::Debug for BlockPos {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_struct("BlockPos")
                .field("x", &self.x())
                .field("y", &self.y())
                .field("z", &self.z())
                .finish()
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for BlockPos {}
    impl flatbuffers::SafeSliceAccess for BlockPos {}
    impl<'a> flatbuffers::Follow<'a> for BlockPos {
        type Inner = &'a BlockPos;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            <&'a BlockPos>::follow(buf, loc)
        }
    }
    impl<'a> flatbuffers::Follow<'a> for &'a BlockPos {
        type Inner = &'a BlockPos;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            flatbuffers::follow_cast_ref::<BlockPos>(buf, loc)
        }
    }
    impl<'b> flatbuffers::Push for BlockPos {
        type Output = BlockPos;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            let src = unsafe {
                ::std::slice::from_raw_parts(self as *const BlockPos as *const u8, Self::size())
            };
            dst.copy_from_slice(src);
        }
    }
    impl<'b> flatbuffers::Push for &'b BlockPos {
        type Output = BlockPos;

        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            let src = unsafe {
                ::std::slice::from_raw_parts(*self as *const BlockPos as *const u8, Self::size())
            };
            dst.copy_from_slice(src);
        }
    }

    impl<'a> flatbuffers::Verifiable for BlockPos {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.in_buffer::<Self>(pos)
        }
    }
    impl<'a> BlockPos {
        #[allow(clippy::too_many_arguments)]
        pub fn new(x: i32, y: i32, z: i32) -> Self {
            let mut s = Self([0; 12]);
            s.set_x(x);
            s.set_y(y);
            s.set_z(z);
            s
        }

        pub fn x(&self) -> i32 {
            let mut mem = core::mem::MaybeUninit::<i32>::uninit();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[0..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<i32>(),
                );
                mem.assume_init()
            }
            .from_little_endian()
        }

        pub fn set_x(&mut self, x: i32) {
            let x_le = x.to_little_endian();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const i32 as *const u8,
                    self.0[0..].as_mut_ptr(),
                    core::mem::size_of::<i32>(),
                );
            }
        }

        pub fn y(&self) -> i32 {
            let mut mem = core::mem::MaybeUninit::<i32>::uninit();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[4..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<i32>(),
                );
                mem.assume_init()
            }
            .from_little_endian()
        }

        pub fn set_y(&mut self, x: i32) {
            let x_le = x.to_little_endian();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const i32 as *const u8,
                    self.0[4..].as_mut_ptr(),
                    core::mem::size_of::<i32>(),
                );
            }
        }

        pub fn z(&self) -> i32 {
            let mut mem = core::mem::MaybeUninit::<i32>::uninit();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[8..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<i32>(),
                );
                mem.assume_init()
            }
            .from_little_endian()
        }

        pub fn set_z(&mut self, x: i32) {
            let x_le = x.to_little_endian();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const i32 as *const u8,
                    self.0[8..].as_mut_ptr(),
                    core::mem::size_of::<i32>(),
                );
            }
        }
    }

    // struct BlockDetails, aligned to 1
    #[repr(transparent)]
    #[derive(Clone, Copy, PartialEq)]
    pub struct BlockDetails(pub [u8; 1]);
    impl Default for BlockDetails {
        fn default() -> Self {
            Self([0; 1])
        }
    }
    impl std::fmt::Debug for BlockDetails {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_struct("BlockDetails")
                .field("has_color", &self.has_color())
                .finish()
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for BlockDetails {}
    impl flatbuffers::SafeSliceAccess for BlockDetails {}
    impl<'a> flatbuffers::Follow<'a> for BlockDetails {
        type Inner = &'a BlockDetails;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            <&'a BlockDetails>::follow(buf, loc)
        }
    }
    impl<'a> flatbuffers::Follow<'a> for &'a BlockDetails {
        type Inner = &'a BlockDetails;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            flatbuffers::follow_cast_ref::<BlockDetails>(buf, loc)
        }
    }
    impl<'b> flatbuffers::Push for BlockDetails {
        type Output = BlockDetails;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            let src = unsafe {
                ::std::slice::from_raw_parts(self as *const BlockDetails as *const u8, Self::size())
            };
            dst.copy_from_slice(src);
        }
    }
    impl<'b> flatbuffers::Push for &'b BlockDetails {
        type Output = BlockDetails;

        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            let src = unsafe {
                ::std::slice::from_raw_parts(
                    *self as *const BlockDetails as *const u8,
                    Self::size(),
                )
            };
            dst.copy_from_slice(src);
        }
    }

    impl<'a> flatbuffers::Verifiable for BlockDetails {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.in_buffer::<Self>(pos)
        }
    }
    impl<'a> BlockDetails {
        #[allow(clippy::too_many_arguments)]
        pub fn new(has_color: bool) -> Self {
            let mut s = Self([0; 1]);
            s.set_has_color(has_color);
            s
        }

        pub fn has_color(&self) -> bool {
            let mut mem = core::mem::MaybeUninit::<bool>::uninit();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[0..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<bool>(),
                );
                mem.assume_init()
            }
            .from_little_endian()
        }

        pub fn set_has_color(&mut self, x: bool) {
            let x_le = x.to_little_endian();
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const bool as *const u8,
                    self.0[0..].as_mut_ptr(),
                    core::mem::size_of::<bool>(),
                );
            }
        }
    }

    pub enum WriteBodyOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct WriteBody<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for WriteBody<'a> {
        type Inner = WriteBody<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> WriteBody<'a> {
        pub const VT_FLOAT: flatbuffers::VOffsetT = 4;
        pub const VT_INT: flatbuffers::VOffsetT = 6;
        pub const VT_STRING: flatbuffers::VOffsetT = 8;
        pub const VT_VEC: flatbuffers::VOffsetT = 10;
        pub const VT_BLOCK: flatbuffers::VOffsetT = 12;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            WriteBody { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args WriteBodyArgs<'args>,
        ) -> flatbuffers::WIPOffset<WriteBody<'bldr>> {
            let mut builder = WriteBodyBuilder::new(_fbb);
            if let Some(x) = args.block {
                builder.add_block(x);
            }
            if let Some(x) = args.vec {
                builder.add_vec(x);
            }
            if let Some(x) = args.string {
                builder.add_string(x);
            }
            if let Some(x) = args.int {
                builder.add_int(x);
            }
            if let Some(x) = args.float {
                builder.add_float(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn float(&self) -> Option<f32> {
            self._tab.get::<f32>(WriteBody::VT_FLOAT, None)
        }
        #[inline]
        pub fn int(&self) -> Option<i32> {
            self._tab.get::<i32>(WriteBody::VT_INT, None)
        }
        #[inline]
        pub fn string(&self) -> Option<&'a str> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<&str>>(WriteBody::VT_STRING, None)
        }
        #[inline]
        pub fn vec(&self) -> Option<&'a Vec3> {
            self._tab.get::<Vec3>(WriteBody::VT_VEC, None)
        }
        #[inline]
        pub fn block(&self) -> Option<&'a BlockPos> {
            self._tab.get::<BlockPos>(WriteBody::VT_BLOCK, None)
        }
    }

    impl flatbuffers::Verifiable for WriteBody<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<f32>("float", Self::VT_FLOAT, false)?
                .visit_field::<i32>("int", Self::VT_INT, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "string",
                    Self::VT_STRING,
                    false,
                )?
                .visit_field::<Vec3>("vec", Self::VT_VEC, false)?
                .visit_field::<BlockPos>("block", Self::VT_BLOCK, false)?
                .finish();
            Ok(())
        }
    }
    pub struct WriteBodyArgs<'a> {
        pub float: Option<f32>,
        pub int: Option<i32>,
        pub string: Option<flatbuffers::WIPOffset<&'a str>>,
        pub vec: Option<&'a Vec3>,
        pub block: Option<&'a BlockPos>,
    }
    impl<'a> Default for WriteBodyArgs<'a> {
        #[inline]
        fn default() -> Self {
            WriteBodyArgs {
                float: None,
                int: None,
                string: None,
                vec: None,
                block: None,
            }
        }
    }
    pub struct WriteBodyBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> WriteBodyBuilder<'a, 'b> {
        #[inline]
        pub fn add_float(&mut self, float: f32) {
            self.fbb_
                .push_slot_always::<f32>(WriteBody::VT_FLOAT, float);
        }
        #[inline]
        pub fn add_int(&mut self, int: i32) {
            self.fbb_.push_slot_always::<i32>(WriteBody::VT_INT, int);
        }
        #[inline]
        pub fn add_string(&mut self, string: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(WriteBody::VT_STRING, string);
        }
        #[inline]
        pub fn add_vec(&mut self, vec: &Vec3) {
            self.fbb_.push_slot_always::<&Vec3>(WriteBody::VT_VEC, vec);
        }
        #[inline]
        pub fn add_block(&mut self, block: &BlockPos) {
            self.fbb_
                .push_slot_always::<&BlockPos>(WriteBody::VT_BLOCK, block);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> WriteBodyBuilder<'a, 'b> {
            let start = _fbb.start_table();
            WriteBodyBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<WriteBody<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for WriteBody<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("WriteBody");
            ds.field("float", &self.float());
            ds.field("int", &self.int());
            ds.field("string", &self.string());
            ds.field("vec", &self.vec());
            ds.field("block", &self.block());
            ds.finish()
        }
    }
    pub enum CommandOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Command<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Command<'a> {
        type Inner = Command<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> Command<'a> {
        pub const VT_CMD: flatbuffers::VOffsetT = 4;
        pub const VT_TARGET_ENTITY: flatbuffers::VOffsetT = 6;
        pub const VT_TARGET_PLAYER_ENTITY: flatbuffers::VOffsetT = 8;
        pub const VT_TARGET_WORLD: flatbuffers::VOffsetT = 10;
        pub const VT_TARGET_BLOCK: flatbuffers::VOffsetT = 12;
        pub const VT_WRITE: flatbuffers::VOffsetT = 14;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Command { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args CommandArgs<'args>,
        ) -> flatbuffers::WIPOffset<Command<'bldr>> {
            let mut builder = CommandBuilder::new(_fbb);
            if let Some(x) = args.write {
                builder.add_write(x);
            }
            if let Some(x) = args.target_block {
                builder.add_target_block(x);
            }
            if let Some(x) = args.target_entity {
                builder.add_target_entity(x);
            }
            builder.add_cmd(args.cmd);
            if let Some(x) = args.target_world {
                builder.add_target_world(x);
            }
            builder.add_target_player_entity(args.target_player_entity);
            builder.finish()
        }

        #[inline]
        pub fn cmd(&self) -> CommandType {
            self._tab
                .get::<CommandType>(Command::VT_CMD, Some(CommandType::PlayerName))
                .unwrap()
        }
        #[inline]
        pub fn target_entity(&self) -> Option<i32> {
            self._tab.get::<i32>(Command::VT_TARGET_ENTITY, None)
        }
        #[inline]
        pub fn target_player_entity(&self) -> bool {
            self._tab
                .get::<bool>(Command::VT_TARGET_PLAYER_ENTITY, Some(false))
                .unwrap()
        }
        #[inline]
        pub fn target_world(&self) -> Option<Dimension> {
            self._tab.get::<Dimension>(Command::VT_TARGET_WORLD, None)
        }
        #[inline]
        pub fn target_block(&self) -> Option<&'a BlockPos> {
            self._tab.get::<BlockPos>(Command::VT_TARGET_BLOCK, None)
        }
        #[inline]
        pub fn write(&self) -> Option<WriteBody<'a>> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<WriteBody>>(Command::VT_WRITE, None)
        }
    }

    impl flatbuffers::Verifiable for Command<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<CommandType>("cmd", Self::VT_CMD, false)?
                .visit_field::<i32>("target_entity", Self::VT_TARGET_ENTITY, false)?
                .visit_field::<bool>("target_player_entity", Self::VT_TARGET_PLAYER_ENTITY, false)?
                .visit_field::<Dimension>("target_world", Self::VT_TARGET_WORLD, false)?
                .visit_field::<BlockPos>("target_block", Self::VT_TARGET_BLOCK, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<WriteBody>>(
                    "write",
                    Self::VT_WRITE,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct CommandArgs<'a> {
        pub cmd: CommandType,
        pub target_entity: Option<i32>,
        pub target_player_entity: bool,
        pub target_world: Option<Dimension>,
        pub target_block: Option<&'a BlockPos>,
        pub write: Option<flatbuffers::WIPOffset<WriteBody<'a>>>,
    }
    impl<'a> Default for CommandArgs<'a> {
        #[inline]
        fn default() -> Self {
            CommandArgs {
                cmd: CommandType::PlayerName,
                target_entity: None,
                target_player_entity: false,
                target_world: None,
                target_block: None,
                write: None,
            }
        }
    }
    pub struct CommandBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> CommandBuilder<'a, 'b> {
        #[inline]
        pub fn add_cmd(&mut self, cmd: CommandType) {
            self.fbb_
                .push_slot::<CommandType>(Command::VT_CMD, cmd, CommandType::PlayerName);
        }
        #[inline]
        pub fn add_target_entity(&mut self, target_entity: i32) {
            self.fbb_
                .push_slot_always::<i32>(Command::VT_TARGET_ENTITY, target_entity);
        }
        #[inline]
        pub fn add_target_player_entity(&mut self, target_player_entity: bool) {
            self.fbb_.push_slot::<bool>(
                Command::VT_TARGET_PLAYER_ENTITY,
                target_player_entity,
                false,
            );
        }
        #[inline]
        pub fn add_target_world(&mut self, target_world: Dimension) {
            self.fbb_
                .push_slot_always::<Dimension>(Command::VT_TARGET_WORLD, target_world);
        }
        #[inline]
        pub fn add_target_block(&mut self, target_block: &BlockPos) {
            self.fbb_
                .push_slot_always::<&BlockPos>(Command::VT_TARGET_BLOCK, target_block);
        }
        #[inline]
        pub fn add_write(&mut self, write: flatbuffers::WIPOffset<WriteBody<'b>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<WriteBody>>(Command::VT_WRITE, write);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> CommandBuilder<'a, 'b> {
            let start = _fbb.start_table();
            CommandBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Command<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for Command<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("Command");
            ds.field("cmd", &self.cmd());
            ds.field("target_entity", &self.target_entity());
            ds.field("target_player_entity", &self.target_player_entity());
            ds.field("target_world", &self.target_world());
            ds.field("target_block", &self.target_block());
            ds.field("write", &self.write());
            ds.finish()
        }
    }
    pub enum StateRequestOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct StateRequest<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for StateRequest<'a> {
        type Inner = StateRequest<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> StateRequest<'a> {
        pub const VT_ENTITIES_BY_ID: flatbuffers::VOffsetT = 4;
        pub const VT_TARGET_WORLD: flatbuffers::VOffsetT = 6;
        pub const VT_TARGET_BLOCK: flatbuffers::VOffsetT = 8;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            StateRequest { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args StateRequestArgs<'args>,
        ) -> flatbuffers::WIPOffset<StateRequest<'bldr>> {
            let mut builder = StateRequestBuilder::new(_fbb);
            if let Some(x) = args.target_block {
                builder.add_target_block(x);
            }
            if let Some(x) = args.target_world {
                builder.add_target_world(x);
            }
            builder.add_entities_by_id(args.entities_by_id);
            builder.finish()
        }

        #[inline]
        pub fn entities_by_id(&self) -> bool {
            self._tab
                .get::<bool>(StateRequest::VT_ENTITIES_BY_ID, Some(false))
                .unwrap()
        }
        #[inline]
        pub fn target_world(&self) -> Option<Dimension> {
            self._tab
                .get::<Dimension>(StateRequest::VT_TARGET_WORLD, None)
        }
        #[inline]
        pub fn target_block(&self) -> Option<&'a BlockPos> {
            self._tab
                .get::<BlockPos>(StateRequest::VT_TARGET_BLOCK, None)
        }
    }

    impl flatbuffers::Verifiable for StateRequest<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<bool>("entities_by_id", Self::VT_ENTITIES_BY_ID, false)?
                .visit_field::<Dimension>("target_world", Self::VT_TARGET_WORLD, false)?
                .visit_field::<BlockPos>("target_block", Self::VT_TARGET_BLOCK, false)?
                .finish();
            Ok(())
        }
    }
    pub struct StateRequestArgs<'a> {
        pub entities_by_id: bool,
        pub target_world: Option<Dimension>,
        pub target_block: Option<&'a BlockPos>,
    }
    impl<'a> Default for StateRequestArgs<'a> {
        #[inline]
        fn default() -> Self {
            StateRequestArgs {
                entities_by_id: false,
                target_world: None,
                target_block: None,
            }
        }
    }
    pub struct StateRequestBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> StateRequestBuilder<'a, 'b> {
        #[inline]
        pub fn add_entities_by_id(&mut self, entities_by_id: bool) {
            self.fbb_
                .push_slot::<bool>(StateRequest::VT_ENTITIES_BY_ID, entities_by_id, false);
        }
        #[inline]
        pub fn add_target_world(&mut self, target_world: Dimension) {
            self.fbb_
                .push_slot_always::<Dimension>(StateRequest::VT_TARGET_WORLD, target_world);
        }
        #[inline]
        pub fn add_target_block(&mut self, target_block: &BlockPos) {
            self.fbb_
                .push_slot_always::<&BlockPos>(StateRequest::VT_TARGET_BLOCK, target_block);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> StateRequestBuilder<'a, 'b> {
            let start = _fbb.start_table();
            StateRequestBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<StateRequest<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for StateRequest<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("StateRequest");
            ds.field("entities_by_id", &self.entities_by_id());
            ds.field("target_world", &self.target_world());
            ds.field("target_block", &self.target_block());
            ds.finish()
        }
    }
    pub enum GameRequestOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct GameRequest<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for GameRequest<'a> {
        type Inner = GameRequest<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> GameRequest<'a> {
        pub const VT_BODY_TYPE: flatbuffers::VOffsetT = 4;
        pub const VT_BODY: flatbuffers::VOffsetT = 6;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            GameRequest { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args GameRequestArgs,
        ) -> flatbuffers::WIPOffset<GameRequest<'bldr>> {
            let mut builder = GameRequestBuilder::new(_fbb);
            if let Some(x) = args.body {
                builder.add_body(x);
            }
            builder.add_body_type(args.body_type);
            builder.finish()
        }

        #[inline]
        pub fn body_type(&self) -> GameRequestBody {
            self._tab
                .get::<GameRequestBody>(GameRequest::VT_BODY_TYPE, Some(GameRequestBody::NONE))
                .unwrap()
        }
        #[inline]
        pub fn body(&self) -> flatbuffers::Table<'a> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(
                    GameRequest::VT_BODY,
                    None,
                )
                .unwrap()
        }
        #[inline]
        #[allow(non_snake_case)]
        pub fn body_as_command(&self) -> Option<Command<'a>> {
            if self.body_type() == GameRequestBody::Command {
                let u = self.body();
                Some(Command::init_from_table(u))
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn body_as_state_request(&self) -> Option<StateRequest<'a>> {
            if self.body_type() == GameRequestBody::StateRequest {
                let u = self.body();
                Some(StateRequest::init_from_table(u))
            } else {
                None
            }
        }
    }

    impl flatbuffers::Verifiable for GameRequest<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_union::<GameRequestBody, _>(
                    "body_type",
                    Self::VT_BODY_TYPE,
                    "body",
                    Self::VT_BODY,
                    true,
                    |key, v, pos| match key {
                        GameRequestBody::Command => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<Command>>(
                                "GameRequestBody::Command",
                                pos,
                            ),
                        GameRequestBody::StateRequest => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<StateRequest>>(
                                "GameRequestBody::StateRequest",
                                pos,
                            ),
                        _ => Ok(()),
                    },
                )?
                .finish();
            Ok(())
        }
    }
    pub struct GameRequestArgs {
        pub body_type: GameRequestBody,
        pub body: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    }
    impl<'a> Default for GameRequestArgs {
        #[inline]
        fn default() -> Self {
            GameRequestArgs {
                body_type: GameRequestBody::NONE,
                body: None, // required field
            }
        }
    }
    pub struct GameRequestBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> GameRequestBuilder<'a, 'b> {
        #[inline]
        pub fn add_body_type(&mut self, body_type: GameRequestBody) {
            self.fbb_.push_slot::<GameRequestBody>(
                GameRequest::VT_BODY_TYPE,
                body_type,
                GameRequestBody::NONE,
            );
        }
        #[inline]
        pub fn add_body(&mut self, body: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(GameRequest::VT_BODY, body);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> GameRequestBuilder<'a, 'b> {
            let start = _fbb.start_table();
            GameRequestBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<GameRequest<'a>> {
            let o = self.fbb_.end_table(self.start_);
            self.fbb_.required(o, GameRequest::VT_BODY, "body");
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for GameRequest<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("GameRequest");
            ds.field("body_type", &self.body_type());
            match self.body_type() {
                GameRequestBody::Command => {
                    if let Some(x) = self.body_as_command() {
                        ds.field("body", &x)
                    } else {
                        ds.field(
                            "body",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                GameRequestBody::StateRequest => {
                    if let Some(x) = self.body_as_state_request() {
                        ds.field("body", &x)
                    } else {
                        ds.field(
                            "body",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                _ => {
                    let x: Option<()> = None;
                    ds.field("body", &x)
                }
            };
            ds.finish()
        }
    }
    pub enum ResponseOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Response<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Response<'a> {
        type Inner = Response<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> Response<'a> {
        pub const VT_ERROR: flatbuffers::VOffsetT = 4;
        pub const VT_FLOAT: flatbuffers::VOffsetT = 6;
        pub const VT_INT: flatbuffers::VOffsetT = 8;
        pub const VT_STRING: flatbuffers::VOffsetT = 10;
        pub const VT_VEC: flatbuffers::VOffsetT = 12;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Response { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args ResponseArgs<'args>,
        ) -> flatbuffers::WIPOffset<Response<'bldr>> {
            let mut builder = ResponseBuilder::new(_fbb);
            if let Some(x) = args.vec {
                builder.add_vec(x);
            }
            if let Some(x) = args.string {
                builder.add_string(x);
            }
            if let Some(x) = args.int {
                builder.add_int(x);
            }
            if let Some(x) = args.float {
                builder.add_float(x);
            }
            if let Some(x) = args.error {
                builder.add_error(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn error(&self) -> Option<Error> {
            self._tab.get::<Error>(Response::VT_ERROR, None)
        }
        #[inline]
        pub fn float(&self) -> Option<f32> {
            self._tab.get::<f32>(Response::VT_FLOAT, None)
        }
        #[inline]
        pub fn int(&self) -> Option<i32> {
            self._tab.get::<i32>(Response::VT_INT, None)
        }
        #[inline]
        pub fn string(&self) -> Option<&'a str> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<&str>>(Response::VT_STRING, None)
        }
        #[inline]
        pub fn vec(&self) -> Option<&'a Vec3> {
            self._tab.get::<Vec3>(Response::VT_VEC, None)
        }
    }

    impl flatbuffers::Verifiable for Response<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<Error>("error", Self::VT_ERROR, false)?
                .visit_field::<f32>("float", Self::VT_FLOAT, false)?
                .visit_field::<i32>("int", Self::VT_INT, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "string",
                    Self::VT_STRING,
                    false,
                )?
                .visit_field::<Vec3>("vec", Self::VT_VEC, false)?
                .finish();
            Ok(())
        }
    }
    pub struct ResponseArgs<'a> {
        pub error: Option<Error>,
        pub float: Option<f32>,
        pub int: Option<i32>,
        pub string: Option<flatbuffers::WIPOffset<&'a str>>,
        pub vec: Option<&'a Vec3>,
    }
    impl<'a> Default for ResponseArgs<'a> {
        #[inline]
        fn default() -> Self {
            ResponseArgs {
                error: None,
                float: None,
                int: None,
                string: None,
                vec: None,
            }
        }
    }
    pub struct ResponseBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> ResponseBuilder<'a, 'b> {
        #[inline]
        pub fn add_error(&mut self, error: Error) {
            self.fbb_
                .push_slot_always::<Error>(Response::VT_ERROR, error);
        }
        #[inline]
        pub fn add_float(&mut self, float: f32) {
            self.fbb_.push_slot_always::<f32>(Response::VT_FLOAT, float);
        }
        #[inline]
        pub fn add_int(&mut self, int: i32) {
            self.fbb_.push_slot_always::<i32>(Response::VT_INT, int);
        }
        #[inline]
        pub fn add_string(&mut self, string: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Response::VT_STRING, string);
        }
        #[inline]
        pub fn add_vec(&mut self, vec: &Vec3) {
            self.fbb_.push_slot_always::<&Vec3>(Response::VT_VEC, vec);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ResponseBuilder<'a, 'b> {
            let start = _fbb.start_table();
            ResponseBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Response<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for Response<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("Response");
            ds.field("error", &self.error());
            ds.field("float", &self.float());
            ds.field("int", &self.int());
            ds.field("string", &self.string());
            ds.field("vec", &self.vec());
            ds.finish()
        }
    }
    pub enum StateResponseOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct StateResponse<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for StateResponse<'a> {
        type Inner = StateResponse<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> StateResponse<'a> {
        pub const VT_PLAYER_ENTITY_ID: flatbuffers::VOffsetT = 4;
        pub const VT_PLAYER_WORLD: flatbuffers::VOffsetT = 6;
        pub const VT_ENTITY_IDS: flatbuffers::VOffsetT = 8;
        pub const VT_BLOCK: flatbuffers::VOffsetT = 10;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            StateResponse { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args StateResponseArgs<'args>,
        ) -> flatbuffers::WIPOffset<StateResponse<'bldr>> {
            let mut builder = StateResponseBuilder::new(_fbb);
            if let Some(x) = args.block {
                builder.add_block(x);
            }
            if let Some(x) = args.entity_ids {
                builder.add_entity_ids(x);
            }
            if let Some(x) = args.player_entity_id {
                builder.add_player_entity_id(x);
            }
            if let Some(x) = args.player_world {
                builder.add_player_world(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn player_entity_id(&self) -> Option<i32> {
            self._tab
                .get::<i32>(StateResponse::VT_PLAYER_ENTITY_ID, None)
        }
        #[inline]
        pub fn player_world(&self) -> Option<Dimension> {
            self._tab
                .get::<Dimension>(StateResponse::VT_PLAYER_WORLD, None)
        }
        #[inline]
        pub fn entity_ids(&self) -> Option<flatbuffers::Vector<'a, i32>> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(
                    StateResponse::VT_ENTITY_IDS,
                    None,
                )
        }
        #[inline]
        pub fn block(&self) -> Option<&'a BlockDetails> {
            self._tab.get::<BlockDetails>(StateResponse::VT_BLOCK, None)
        }
    }

    impl flatbuffers::Verifiable for StateResponse<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<i32>("player_entity_id", Self::VT_PLAYER_ENTITY_ID, false)?
                .visit_field::<Dimension>("player_world", Self::VT_PLAYER_WORLD, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>(
                    "entity_ids",
                    Self::VT_ENTITY_IDS,
                    false,
                )?
                .visit_field::<BlockDetails>("block", Self::VT_BLOCK, false)?
                .finish();
            Ok(())
        }
    }
    pub struct StateResponseArgs<'a> {
        pub player_entity_id: Option<i32>,
        pub player_world: Option<Dimension>,
        pub entity_ids: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
        pub block: Option<&'a BlockDetails>,
    }
    impl<'a> Default for StateResponseArgs<'a> {
        #[inline]
        fn default() -> Self {
            StateResponseArgs {
                player_entity_id: None,
                player_world: None,
                entity_ids: None,
                block: None,
            }
        }
    }
    pub struct StateResponseBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> StateResponseBuilder<'a, 'b> {
        #[inline]
        pub fn add_player_entity_id(&mut self, player_entity_id: i32) {
            self.fbb_
                .push_slot_always::<i32>(StateResponse::VT_PLAYER_ENTITY_ID, player_entity_id);
        }
        #[inline]
        pub fn add_player_world(&mut self, player_world: Dimension) {
            self.fbb_
                .push_slot_always::<Dimension>(StateResponse::VT_PLAYER_WORLD, player_world);
        }
        #[inline]
        pub fn add_entity_ids(
            &mut self,
            entity_ids: flatbuffers::WIPOffset<flatbuffers::Vector<'b, i32>>,
        ) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                StateResponse::VT_ENTITY_IDS,
                entity_ids,
            );
        }
        #[inline]
        pub fn add_block(&mut self, block: &BlockDetails) {
            self.fbb_
                .push_slot_always::<&BlockDetails>(StateResponse::VT_BLOCK, block);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> StateResponseBuilder<'a, 'b> {
            let start = _fbb.start_table();
            StateResponseBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<StateResponse<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for StateResponse<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("StateResponse");
            ds.field("player_entity_id", &self.player_entity_id());
            ds.field("player_world", &self.player_world());
            ds.field("entity_ids", &self.entity_ids());
            ds.field("block", &self.block());
            ds.finish()
        }
    }
    pub enum GameResponseOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct GameResponse<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for GameResponse<'a> {
        type Inner = GameResponse<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> GameResponse<'a> {
        pub const VT_BODY_TYPE: flatbuffers::VOffsetT = 4;
        pub const VT_BODY: flatbuffers::VOffsetT = 6;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            GameResponse { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args GameResponseArgs,
        ) -> flatbuffers::WIPOffset<GameResponse<'bldr>> {
            let mut builder = GameResponseBuilder::new(_fbb);
            if let Some(x) = args.body {
                builder.add_body(x);
            }
            builder.add_body_type(args.body_type);
            builder.finish()
        }

        #[inline]
        pub fn body_type(&self) -> GameResponseBody {
            self._tab
                .get::<GameResponseBody>(GameResponse::VT_BODY_TYPE, Some(GameResponseBody::NONE))
                .unwrap()
        }
        #[inline]
        pub fn body(&self) -> flatbuffers::Table<'a> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(
                    GameResponse::VT_BODY,
                    None,
                )
                .unwrap()
        }
        #[inline]
        #[allow(non_snake_case)]
        pub fn body_as_response(&self) -> Option<Response<'a>> {
            if self.body_type() == GameResponseBody::Response {
                let u = self.body();
                Some(Response::init_from_table(u))
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn body_as_state_response(&self) -> Option<StateResponse<'a>> {
            if self.body_type() == GameResponseBody::StateResponse {
                let u = self.body();
                Some(StateResponse::init_from_table(u))
            } else {
                None
            }
        }
    }

    impl flatbuffers::Verifiable for GameResponse<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_union::<GameResponseBody, _>(
                    "body_type",
                    Self::VT_BODY_TYPE,
                    "body",
                    Self::VT_BODY,
                    true,
                    |key, v, pos| match key {
                        GameResponseBody::Response => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<Response>>(
                                "GameResponseBody::Response",
                                pos,
                            ),
                        GameResponseBody::StateResponse => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<StateResponse>>(
                                "GameResponseBody::StateResponse",
                                pos,
                            ),
                        _ => Ok(()),
                    },
                )?
                .finish();
            Ok(())
        }
    }
    pub struct GameResponseArgs {
        pub body_type: GameResponseBody,
        pub body: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    }
    impl<'a> Default for GameResponseArgs {
        #[inline]
        fn default() -> Self {
            GameResponseArgs {
                body_type: GameResponseBody::NONE,
                body: None, // required field
            }
        }
    }
    pub struct GameResponseBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> GameResponseBuilder<'a, 'b> {
        #[inline]
        pub fn add_body_type(&mut self, body_type: GameResponseBody) {
            self.fbb_.push_slot::<GameResponseBody>(
                GameResponse::VT_BODY_TYPE,
                body_type,
                GameResponseBody::NONE,
            );
        }
        #[inline]
        pub fn add_body(&mut self, body: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(GameResponse::VT_BODY, body);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> GameResponseBuilder<'a, 'b> {
            let start = _fbb.start_table();
            GameResponseBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<GameResponse<'a>> {
            let o = self.fbb_.end_table(self.start_);
            self.fbb_.required(o, GameResponse::VT_BODY, "body");
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for GameResponse<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("GameResponse");
            ds.field("body_type", &self.body_type());
            match self.body_type() {
                GameResponseBody::Response => {
                    if let Some(x) = self.body_as_response() {
                        ds.field("body", &x)
                    } else {
                        ds.field(
                            "body",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                GameResponseBody::StateResponse => {
                    if let Some(x) = self.body_as_state_response() {
                        ds.field("body", &x)
                    } else {
                        ds.field(
                            "body",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                _ => {
                    let x: Option<()> = None;
                    ds.field("body", &x)
                }
            };
            ds.finish()
        }
    }
} // pub mod MCFS
