// automatically generated by the FlatBuffers compiler, do not modify

package MCFS

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class BlockDetails : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : BlockDetails {
        __init(_i, _bb)
        return this
    }
    val pos : MCFS.BlockPos? get() = pos(MCFS.BlockPos())
    fun pos(obj: MCFS.BlockPos) : MCFS.BlockPos? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    val hasColor : Boolean
        get() {
            val o = __offset(6)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_2_0_0()
        fun getRootAsBlockDetails(_bb: ByteBuffer): BlockDetails = getRootAsBlockDetails(_bb, BlockDetails())
        fun getRootAsBlockDetails(_bb: ByteBuffer, obj: BlockDetails): BlockDetails {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun startBlockDetails(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addPos(builder: FlatBufferBuilder, pos: Int) = builder.addStruct(0, pos, 0)
        fun addHasColor(builder: FlatBufferBuilder, hasColor: Boolean) = builder.addBoolean(1, hasColor, false)
        fun endBlockDetails(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
                builder.required(o, 4)
            return o
        }
    }
}
