// automatically generated by the FlatBuffers compiler, do not modify

package MCFS

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class StateResponse : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : StateResponse {
        __init(_i, _bb)
        return this
    }
    val isInGame : Boolean
        get() {
            val o = __offset(4)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_2_0_0()
        fun getRootAsStateResponse(_bb: ByteBuffer): StateResponse = getRootAsStateResponse(_bb, StateResponse())
        fun getRootAsStateResponse(_bb: ByteBuffer, obj: StateResponse): StateResponse {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createStateResponse(builder: FlatBufferBuilder, isInGame: Boolean) : Int {
            builder.startTable(1)
            addIsInGame(builder, isInGame)
            return endStateResponse(builder)
        }
        fun startStateResponse(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addIsInGame(builder: FlatBufferBuilder, isInGame: Boolean) = builder.addBoolean(0, isInGame, false)
        fun endStateResponse(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
