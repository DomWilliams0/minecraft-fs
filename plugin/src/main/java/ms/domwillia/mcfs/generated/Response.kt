// automatically generated by the FlatBuffers compiler, do not modify

package MCFS

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class Response : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Response {
        __init(_i, _bb)
        return this
    }
    val error : Int?
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else null
        }
    val float : Float?
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getFloat(o + bb_pos) else null
        }
    val int : Int?
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos) else null
        }
    val string : String?
        get() {
            val o = __offset(10)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val stringAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun stringInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_2_0_0()
        fun getRootAsResponse(_bb: ByteBuffer): Response = getRootAsResponse(_bb, Response())
        fun getRootAsResponse(_bb: ByteBuffer, obj: Response): Response {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createResponse(builder: FlatBufferBuilder, error: Int?, float: Float?, int: Int?, stringOffset: Int) : Int {
            builder.startTable(4)
            addString(builder, stringOffset)
            int?.run { addInt(builder, int) }
            float?.run { addFloat(builder, float) }
            error?.run { addError(builder, error) }
            return endResponse(builder)
        }
        fun startResponse(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addError(builder: FlatBufferBuilder, error: Int) = builder.addInt(0, error, 0)
        fun addFloat(builder: FlatBufferBuilder, float: Float) = builder.addFloat(1, float, 0.0)
        fun addInt(builder: FlatBufferBuilder, int: Int) = builder.addInt(2, int, 0)
        fun addString(builder: FlatBufferBuilder, string: Int) = builder.addOffset(3, string, 0)
        fun endResponse(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishResponseBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset)
        fun finishSizePrefixedResponseBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset)
    }
}
