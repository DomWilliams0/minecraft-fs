// automatically generated by the FlatBuffers compiler, do not modify

package MCFS

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class Command : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Command {
        __init(_i, _bb)
        return this
    }
    val cmd : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val targetEntity : Int?
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else null
        }
    val targetPlayerEntity : Boolean
        get() {
            val o = __offset(8)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val targetWorld : UByte?
        get() {
            val o = __offset(10)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else null
        }
    val write : MCFS.WriteBody? get() = write(MCFS.WriteBody())
    fun write(obj: MCFS.WriteBody) : MCFS.WriteBody? {
        val o = __offset(12)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_2_0_0()
        fun getRootAsCommand(_bb: ByteBuffer): Command = getRootAsCommand(_bb, Command())
        fun getRootAsCommand(_bb: ByteBuffer, obj: Command): Command {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createCommand(builder: FlatBufferBuilder, cmd: Int, targetEntity: Int?, targetPlayerEntity: Boolean, targetWorld: UByte?, writeOffset: Int) : Int {
            builder.startTable(5)
            addWrite(builder, writeOffset)
            targetEntity?.run { addTargetEntity(builder, targetEntity) }
            addCmd(builder, cmd)
            targetWorld?.run { addTargetWorld(builder, targetWorld) }
            addTargetPlayerEntity(builder, targetPlayerEntity)
            return endCommand(builder)
        }
        fun startCommand(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addCmd(builder: FlatBufferBuilder, cmd: Int) = builder.addInt(0, cmd, 0)
        fun addTargetEntity(builder: FlatBufferBuilder, targetEntity: Int) = builder.addInt(1, targetEntity, 0)
        fun addTargetPlayerEntity(builder: FlatBufferBuilder, targetPlayerEntity: Boolean) = builder.addBoolean(2, targetPlayerEntity, false)
        fun addTargetWorld(builder: FlatBufferBuilder, targetWorld: UByte) = builder.addByte(3, targetWorld.toByte(), 0)
        fun addWrite(builder: FlatBufferBuilder, write: Int) = builder.addOffset(4, write, 0)
        fun endCommand(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
